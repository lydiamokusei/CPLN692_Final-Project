require(RSelenium)
require(rvest)
# java -jar selenium-server-standalone-3.9.1.jar
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr$navigate("http://property.phila.gov/")
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
knitr::opts_chunk$set(echo = TRUE)
load("G:/Yinuo Yin/Study/Upenn/2018 Spring/LARP 745/MTA-Subway-Congestion/00Working/Regression.RData")
load("G:/Yinuo Yin/Study/Upenn/2018 Spring/LARP 745/MTA-Subway-Congestion/00Working/Regression.RData")
library(corrplot)
library(caret)
library(AppliedPredictiveModeling)
library(stargazer)
library(ggmap)
library(tidyverse)
library(sf)
library(FNN)
library(data.table)
library(car)
library(spdep)
library(lubridate)
library(rgdal)
library(sp)
library(dplyr)
names(myvars)
load("G:/Yinuo Yin/Study/Upenn/2018 Spring/LARP 745/MTA-Subway-Congestion/00Working/Regression.RData")
grid.arrange(p1, p2, p3, p4, ncol = 2)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2)
grid.arrange(p1, p2, p3, p4, ncol = 2)
p4_2 <- ggplot() + geom_point(aes(1:nrow(test), regTest$residuals), data = test,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order - Test Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
p4 <- ggplot() + geom_point(aes(1:nrow(training), regTrain$residuals), data = training,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order - Training Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
library(corrplot)
library(caret)
library(AppliedPredictiveModeling)
library(stargazer)
library(ggmap)
library(tidyverse)
library(sf)
library(FNN)
library(data.table)
library(car)
library(spdep)
library(lubridate)
library(rgdal)
library(sp)
library(dplyr)
grid.arrange(p1, p2, p3, p4, ncol = 2)
p4 <- ggplot() + geom_point(aes(1:nrow(training), regTrain$residuals), data = training,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order - Training Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
grid.arrange(p1, p2, p3, p4, ncol = 2)
ggplot() + geom_point(aes(1:nrow(test), regTest$residuals), data = test,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order\n - Test Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
ggplot() + geom_point(aes(1:nrow(training), regTrain$residuals), data = training,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order\n - Training Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
p4 <- ggplot() + geom_point(aes(1:nrow(training), regTrain$residuals), data = training,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order\n - Training Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
p4_2 <- ggplot() + geom_point(aes(1:nrow(test), regTest$residuals), data = test,
color="darkorange", size = 1, shape = 1) +
geom_hline(yintercept = 0, linetype = 'dotted', size = 2, color = 'red') +
xlab('Index') + ylab('Residuals') +
ggtitle('Residuals Per Hour Per Station in Sequential Order\n - Test Set')+
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
grid.arrange(p1, p2, p3, p4, ncol = 2)
grid.arrange(p1_2, p2_2, p3_2, p4_2, ncol = 2)
ggplot(data = predictPlot %>% filter(predicted < 200000 & observed <200000), aes(x = observed, y = predicted)) +
geom_point(color="#58D68D", size = 1, shape = 1) +
labs(title="PREDICTIED NET ENTRIES VS. OF OBSERVED NET ENTRIES",
subtitle="Test Dataset Prediction Result",
x="Observed",
y="Predicted") +
geom_smooth(stat = 'smooth',method = lm, color = "#044389") +
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
CVresults2
lmFit$resample
CVresults <-
lmFit$resample %>%
as.data.frame()
View(CVresults)
ggplot(CVresults, aes(Rsquared)) +
geom_histogram(bins=20,
col="grey",
fill="darkorange") +
labs(title="CROSS-VALIDATION R-SQUARED",
x="R-Squared Value",
y="Frequency") +
theme(panel.grid.major = element_line(colour = "#626262"),
panel.grid.minor = element_line(colour = "#626262")) +
plotTheme
CVresults2
shiny::runApp('G:/Yinuo Yin/Study/Upenn/2018 Spring/LARP 745/MTA-Subway-Congestion/00Working/ShinyApp')
View(myvars)
runApp('G:/Yinuo Yin/Study/Upenn/2018 Spring/LARP 745/MTA-Subway-Congestion/Deliverable/Yin,Yinuo_Capstone/ShinyApp')
runApp('G:/Yinuo Yin/Study/Upenn/2018 Spring/LARP 745/MTA-Subway-Congestion/Deliverable/Yin,Yinuo_Capstone/ShinyApp')
installr::installr()
install.packages("installr")
installr::installr()
devtools::install_github('talgalili/installr')
installr()
installr::installr()
# Define your report
system("RMDFILE=Report_MTACongestion_PDF")
system("Rscript -e 'require(knitr);require(markdown);knit('$RMDFILE.rmd', '$RMDFILE.md');
markdownToHTML('$RMDFILE.md', '$RMDFILE.html', options=c(\"use_xhml\"))'")
require(knitr)
require(markdown)
knit("Report_MTACongestion_PDF.Rmd")
library(knitr)
pandoc('input.md', format = 'latex')
library(ggmap)
library(tidyverse)
library(sf)
library(dplyr)
library(rgdal)
library(sp)
library(maptools)
setwd("G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/Yin-Final/DataCollection")
rawdata <- read.csv("RawData_StarbucksDD.csv")
starbucksANDdd <- filter(rawdata, CONAME == "DUNKIN' DONUTS" | CONAME == "STARBUCKS")
onlystarbucks <- filter(starbucksANDdd, CONAME == "STARBUCKS")
sbinPhilly <- filter(onlystarbucks, CITY16 == "PHILADELPHIA" )
ddinPhilly <- filter(starbucksANDdd, CITY16 == "PHILADELPHIA" & CONAME == "DUNKIN' DONUTS")
# OK, go with DD.
# Select needed columns
names(ddinPhilly)
rawdata <- read.csv("RawData_CoffeShops.csv")
starbucksANDdd <- filter(rawdata, CONAME == "DUNKIN' DONUTS" | CONAME == "STARBUCKS")
onlystarbucks <- filter(starbucksANDdd, CONAME == "STARBUCKS")
sbinPhilly <- filter(onlystarbucks, CITY16 == "PHILADELPHIA" )
ddinPhilly <- filter(starbucksANDdd, CITY16 == "PHILADELPHIA" & CONAME == "DUNKIN' DONUTS")
# OK, go with DD.
# Select needed columns
names(ddinPhilly)
View(ddinPhilly)
dd <- ddinPhilly[,c(3,4,8,11,12,17,21,23:26, 28:42)]
dd <- na.omit(dd)
dd <- dd[(dd$HHs !=0),]
ddSF <- dd %>%
mutate(lat = dd$latitude,
lng = dd$longitude)
ddSF <- st_as_sf(ddSF, coords = c("longitude", "latitude"), crs = 4326)
library(geojsonio)
library(spdplyr)
library(rmapshaper)
dd_json <- geojson_json(ddSF)
# Save it to a local file system.
geojson_write(dd_json,
file = "G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/Yin-Final/DataCollection/dunkindonut.geojson")
View(ddSF)
summary(ddSF$SALE)
quantile(ddSF$SALES_VOL, c(0, .2, .4, .6, .8, 1))
View(ddSF)
setwd("G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/CPLN692-Final-Project/rawdata")
dd_json <- geojson_json(ddSF)
# Save it to a local file system.
geojson_write(dd_json,
file = "G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/Yin-Final/DataCollection/dunkindonut.geojson")
# Save it to a local file system.
geojson_write(dd_json,
file = "G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/CPLN692-Final-Project/rawdata/dunkindonut.geojson")
View(dd)
View(onlystarbucks)
# Select needed columns
names(ddinPhilly)
dd <- ddinPhilly[,c(3,4,8,11,12,13,17,23:26,28:42)]
dd <- na.omit(dd)
dd <- dd[(dd$HHs !=0),]
View(dd)
# Convert to shapefile
ddSF <- dd %>%
mutate(lat = dd$latitude,
lng = dd$longitude)
ddSF <- st_as_sf(ddSF, coords = c("longitude", "latitude"), crs = 4326)
# Convert to shapefile
ddSF <- dd %>%
mutate(lat = dd$latitude,
lng = dd$longitude)
ddSF <- st_as_sf(ddSF, coords = c("longitude", "latitude"), crs = 4326)
dd_json <- geojson_json(ddSF)
# Save it to a local file system.
geojson_write(dd_json,
file = "G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/CPLN692-Final-Project/rawdata/dunkindonut.geojson")
quantile(ddSF$NUM, c(0, .2, .4, .6, .8, 1))
View(ddSF)
levels(ddSF$HDBRCH)
View(ddinPhilly)
View(ddSF)
names(ddinPhilly)
dd <- ddinPhilly[,c(3,4,8,11,12,13,17,21, 23:26,28:42)]
dd <- na.omit(dd)
dd <- dd[(dd$HHs !=0),]
# Convert to shapefile
ddSF <- dd %>%
mutate(lat = dd$latitude,
lng = dd$longitude)
ddSF <- st_as_sf(ddSF, coords = c("longitude", "latitude"), crs = 4326)
dd_json <- geojson_json(ddSF)
# Save it to a local file system.
geojson_write(dd_json,
file = "G:/Yinuo Yin/Study/Upenn/2018 Spring/CPLN 692/CPLN692-Final-Project/rawdata/dunkindonut.geojson")
names(ddSF)
summary(ddSF$SALES_VOL)
summary(ddSF$NUMB)
